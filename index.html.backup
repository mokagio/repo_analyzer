<!DOCTYPE html>
<html>
  <head>
    <!-- Original source http://bl.ocks.org/weiglemc/6185069 -->
    <!-- Example based on http://bl.ocks.org/mbostock/3887118 -->
    <!-- Tooltip example from http://www.d3noob.org/2013/01/adding-tooltips-to-d3js-graph.html -->
    <!-- Coding style based on http://gist.github.com/mbostock/5977197 -->

    <!-- Bootstrap CSS framework -->
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css" integrity="sha384-9gVQ4dYFwwWSjIDZnLEWnxCjeSWFphJiwGPXr1jddIhOegiu1FwO5qRGvFXOdJZ4" crossorigin="anonymous" />

    <!-- D3.js powers the graphs rendering -->
    <script src="https://d3js.org/d3.v3.min.js"></script>

    <style>
body {
  font: 11px sans-serif;
}

.axis path,
.axis line {
  fill: none;
  stroke: #000;
  shape-rendering: crispEdges;
}

.dot {
  stroke: #000;
}

.d3-tooltip {
  position: absolute;
  width: 200px;
  height: 28px;
  pointer-events: none;
  background-color: #333;
  color: white;
  padding: 8px;
  /* This is used to override Bootstrap's reboot */
  box-sizing: content-box;
}
    </style>
  </head>

  <body>

    <div class="container">
      <div class="row">
        <div class="col-lg-12">
          <h1>Diglett ðŸ‘“</h1>
          <h3><i>working title</i></h3>
        </div>
      </div>
      <div class="row mt-3">
        <div class="col-lg-12">
          <div id="graph"></div>
        </div>
      </div>
      <div class="row mt-5">
        <div class="col-lg-12">
          <table class="table table-striped table-hover">
            <thead>
              <tr>
                <th scope="col">#</th>
                <th scope="col">First</th>
                <th scope="col">Last</th>
                <th scope="col">Handle</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <th scope="row">1</th>
                <td>Mark</td>
                <td>Otto</td>
                <td>@mdo</td>
              </tr>
              <tr>
                <th scope="row">2</th>
                <td>Jacob</td>
                <td>Thornton</td>
                <td>@fat</td>
              </tr>
              <tr>
                <th scope="row">3</th>
                <td>Larry</td>
                <td>the Bird</td>
                <td>@twitter</td>
              </tr>
            </tbody>
          </table>
        </div>
      </div>
    </div>

    <script>
var margin = {top: 20, right: 20, bottom: 30, left: 40},
  width = 960 - margin.left - margin.right,
  height = 500 - margin.top - margin.bottom;

/*
 * value accessor - returns the value to encode for a given data object.
 * scale - maps value to a visual display encoding, such as a pixel position.
 * map function - maps from data value to display value
 * axis - sets up axis
 */

// setup x
var xValue = function(d) { return d.line_count;}, // data -> value
  xScale = d3.scale.linear().range([0, width]), // value -> display
  xMap = function(d) { return xScale(xValue(d));}, // data -> display
  xAxis = d3.svg.axis().scale(xScale).orient("bottom");

// setup y
var yValue = function(d) { return d.churn;}, // data -> value
  yScale = d3.scale.linear().range([height, 0]), // value -> display
  yMap = function(d) { return yScale(yValue(d));}, // data -> display
  yAxis = d3.svg.axis().scale(yScale).orient("left");

// setup fill color
var cValue = function(d) { return 10; /* TODO: change color depending on churn/lenght ratio */},
  color = d3.scale.category10();

// add the graph canvas to the body of the webpage
var svg = d3.select("#graph").append("svg")
  .attr("width", width + margin.left + margin.right)
  .attr("height", height + margin.top + margin.bottom)
  .append("g")
  .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

// add the tooltip area to the webpage
var tooltip = d3.select("body").append("div")
  .attr("class", "d3-tooltip")
  .style("opacity", 0);

var data = [
  {
    "file": "iflix/TitleScreen/TitleViewModel.swift",
    "churn": 789,
    "line_count": 1574
  },
  {
    "file": "iflix/Home/PageViewModel.swift",
    "churn": 807,
    "line_count": 1434
  },
  {
    "file": "iflixKitTests/tvCatalogue.json",
    "churn": 4,
    "line_count": 1407
  },
  {
    "file": "iflix/Images.xcassets/Landing/Landing2.imageset/square_4_3-3_4_large.jpg",
    "churn": 2,
    "line_count": 1305
  },
  {
    "file": "iflixKitTests/searchSuccess.json",
    "churn": 2,
    "line_count": 1281
  },
  {
    "file": "iflix/Player/NewPlayback/PlaybackViewController.swift",
    "churn": 410,
    "line_count": 1203
  },
  {
    "file": "fastlane/screenshots/id/1_ipad_home.png",
    "churn": 1,
    "line_count": 1149
  },
  {
    "file": "fastlane/screenshots/en-US/1_ipad_home.png",
    "churn": 1,
    "line_count": 1149
  },
  {
    "file": "fastlane/screenshots/en-GB/1_ipad_home.png",
    "churn": 1,
    "line_count": 1149
  },
  {
    "file": "fastlane/screenshots/ms/1_ipad_home.png",
    "churn": 1,
    "line_count": 1149
  },
  {
    "file": "fastlane/screenshots/th/1_ipad_home.png",
    "churn": 1,
    "line_count": 1149
  },
  {
    "file": "iflix/Images.xcassets/Landing/Landing3.imageset/square_4_3-3_4_large.jpg",
    "churn": 2,
    "line_count": 1101
  },
  {
    "file": "iflix/Images.xcassets/Landing/Landing1.imageset/portrait_9_16-3_4_large.jpg",
    "churn": 2,
    "line_count": 1078
  },
  {
    "file": "iflixKitTests/NetworkSessionDoubles.swift",
    "churn": 101,
    "line_count": 1068
  },
  {
    "file": "iflix/Images.xcassets/Landing/Landing1.imageset/square_4_3-3_4_large.jpg",
    "churn": 2,
    "line_count": 1055
  },
  {
    "file": "iflixKitTests/validSimilarTv.json",
    "churn": 3,
    "line_count": 1000
  },
  {
    "file": "iflix/my.lproj/Localizable.strings",
    "churn": 27,
    "line_count": 981
  },
  {
    "file": "iflix/Home/PageViewController.swift",
    "churn": 651,
    "line_count": 850
  },
  {
    "file": "iflix/WebPortal/WebPortalController.swift",
    "churn": 464,
    "line_count": 520
  },
  {
    "file": "iflixKit/FeatureType.swift",
    "churn": 392,
    "line_count": 239
  },
  {
    "file": "iflix/TitleScreen/TitleViewController.swift",
    "churn": 352,
    "line_count": 508
  },
  {
    "file": "iflix/TitleScreen/TitleHeaderViewModel.swift",
    "churn": 323,
    "line_count": 416
  },
  {
    "file": "fastlane/Fastfile",
    "churn": 296,
    "line_count": 701
  },
  {
    "file": "iflix/Menu/RevealViewModel.swift",
    "churn": 255,
    "line_count": 462
  },
  {
    "file": "iflix/Player/PlayerViewController.swift",
    "churn": 231,
    "line_count": 920
  },
  {
    "file": "iflix/Live/LiveHubViewController.swift",
    "churn": 228,
    "line_count": 535
  },
  {
    "file": "iflix/LoginHelper.swift",
    "churn": 224,
    "line_count": 202
  },
  {
    "file": "iflix/DownloadAndPlay/OfflineFileManager.swift",
    "churn": 218,
    "line_count": 969
  },
  {
    "file": "iflix/Home/HomeDataLoader.swift",
    "churn": 195,
    "line_count": 241
  },
  {
    "file": "iflix/Feed/FeedViewController.swift",
    "churn": 193,
    "line_count": 611
  },
  {
    "file": "iflix/Base.lproj/Localizable.strings",
    "churn": 181,
    "line_count": 542
  },
  {
    "file": "iflixKit/ExternalAPIService.swift",
    "churn": 177,
    "line_count": 124
  },
  {
    "file": "iflixTests/Home/PageViewModelSpec.swift",
    "churn": 176,
    "line_count": 680
  },
  {
    "file": "iflix/Player/NewPlayback/VideoPlayback.swift",
    "churn": 176,
    "line_count": 571
  },
  {
    "file": "iflix/Player/PlaybackContext.swift",
    "churn": 170,
    "line_count": 391
  },
  {
    "file": "iflix/Menu/MenuViewModelTableViewHandler.swift",
    "churn": 166,
    "line_count": 370
  },
  {
    "file": "iflix/Search/SearchCoordinator.swift",
    "churn": 165,
    "line_count": 296
  },
  {
    "file": "iflix/Login/EmailLoginViewController.swift",
    "churn": 159,
    "line_count": 202
  },
  {
    "file": "iflix/Home/Carousel/CarouselCellViewModel.swift",
    "churn": 158,
    "line_count": 254
  },
  {
    "file": "iflix/Home/Carousel/CarouselCell.swift",
    "churn": 158,
    "line_count": 263
  },
  {
    "file": "iflixTests/ExternalConfigHelperSpec.swift",
    "churn": 153,
    "line_count": 303
  },
  {
    "file": "iflixTests/TitleHeaderViewModelSpec.swift",
    "churn": 152,
    "line_count": 407
  },
  {
    "file": "iflix/UserInfo.swift",
    "churn": 151,
    "line_count": 551
  }
]

// don't want dots overlapping axis, so add in buffer to data domain
xScale.domain([d3.min(data, xValue)-1, d3.max(data, xValue)+1]);
yScale.domain([d3.min(data, yValue)-1, d3.max(data, yValue)+1]);

// x-axis
svg.append("g")
  .attr("class", "x axis")
  .attr("transform", "translate(0," + height + ")")
  .call(xAxis)
  .append("text")
  .attr("class", "label")
  .attr("x", width)
  .attr("y", -6)
  .style("text-anchor", "end")
  .text("Length");

// y-axis
svg.append("g")
  .attr("class", "y axis")
  .call(yAxis)
  .append("text")
  .attr("class", "label")
  .attr("transform", "rotate(-90)")
  .attr("y", 6)
  .attr("dy", ".71em")
  .style("text-anchor", "end")
  .text("Git Churn");

// draw dots
svg.selectAll(".dot")
  .data(data)
  .enter().append("circle")
  .attr("class", "dot")
  .attr("r", 3.5)
  .attr("cx", xMap)
  .attr("cy", yMap)
  .style("fill", function(d) { return color(cValue(d));}) 
  .on("mouseover", function(d) {
    tooltip.transition()
      .duration(200)
      .style("opacity", .9);
    tooltip.html(d.file + "<br/> (Length: " + xValue(d) 
      + ", Git churn: " + yValue(d) + ")")
      .style("left", (d3.event.pageX + 5) + "px")
      .style("top", (d3.event.pageY - 28) + "px");
  })
  .on("mouseout", function(d) {
    tooltip.transition()
      .duration(500)
      .style("opacity", 0);
  });

/*
// draw legend
  var legend = svg.selectAll(".legend")
      .data(color.domain())
    .enter().append("g")
      .attr("class", "legend")
      .attr("transform", function(d, i) { return "translate(0," + i * 20 + ")"; });

// draw legend colored rectangles
  legend.append("rect")
      .attr("x", width - 18)
      .attr("width", 18)
      .attr("height", 18)
      .style("fill", color);

// draw legend text
  legend.append("text")
      .attr("x", width - 24)
      .attr("y", 9)
      .attr("dy", ".35em")
      .style("text-anchor", "end")
      .text(function(d) { return d;})
 */
    </script>
  </body>
</html>
